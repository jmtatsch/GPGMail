//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

#import "TilingWebView.h"

#import "NSFilePresenter.h"
#import "NSInspectorBarClient.h"
#import "NSTextInputClient.h"

@class DOMHTMLAnchorElement, DOMHTMLElement, DOMNode, NSArray, NSOperationQueue, NSString, NSURL, NSWindow;

@interface EditingMessageWebView : TilingWebView <NSFilePresenter, NSInspectorBarClient, NSTextInputClient>
{
    DOMHTMLElement *_contentElement;	// 160 = 0xa0
    BOOL _delegateRespondsToCanInsertFromPasteboard;	// 168 = 0xa8
    DOMNode *_cursorPositionNode;	// 176 = 0xb0
    NSOperationQueue *_filePromiseOperationQueue;	// 184 = 0xb8
}

+ (id)insertablePasteboardTypes;	// IMP=0x000000010005f8db
@property(readonly, nonatomic) NSOperationQueue *filePromiseOperationQueue; // @synthesize filePromiseOperationQueue=_filePromiseOperationQueue;
@property(nonatomic) BOOL delegateRespondsToCanInsertFromPasteboard; // @synthesize delegateRespondsToCanInsertFromPasteboard=_delegateRespondsToCanInsertFromPasteboard;
@property(retain, nonatomic) DOMNode *cursorPositionNode; // @synthesize cursorPositionNode=_cursorPositionNode;
- (void).cxx_destruct;	// IMP=0x000000010016ee00
- (unsigned long long)characterIndexForPoint:(struct CGPoint)arg1;	// IMP=0x000000010016ed31
- (struct CGRect)firstRectForCharacterRange:(struct _NSRange)arg1 actualRange:(struct _NSRange *)arg2;	// IMP=0x000000010016ec9c
- (id)validAttributesForMarkedText;	// IMP=0x0000000100075b31
- (id)attributedSubstringForProposedRange:(struct _NSRange)arg1 actualRange:(struct _NSRange *)arg2;	// IMP=0x000000010016ec10
- (BOOL)hasMarkedText;	// IMP=0x000000010016ebcb
- (struct _NSRange)markedRange;	// IMP=0x000000010016eb78
- (struct _NSRange)selectedRange;	// IMP=0x000000010016eb25
- (void)unmarkText;	// IMP=0x000000010016eae8
- (void)setMarkedText:(id)arg1 selectedRange:(struct _NSRange)arg2 replacementRange:(struct _NSRange)arg3;	// IMP=0x000000010016e99c
- (void)doCommandBySelector:(SEL)arg1;	// IMP=0x000000010016e80d
- (void)insertText:(id)arg1 replacementRange:(struct _NSRange)arg2;	// IMP=0x000000010016e6d3
- (id)textInput;	// IMP=0x0000000100075b81
@property(readonly) NSArray *inspectorBarItemIdentifiers;
- (BOOL)validateUserInterfaceItem:(id)arg1 fallThrough:(char *)arg2;	// IMP=0x000000010016e4ae
- (BOOL)validateMenuItem:(id)arg1 fallThrough:(char *)arg2;	// IMP=0x000000010016e25d
@property(readonly, nonatomic) BOOL selectionIsInEmptyListItem;
@property(readonly, nonatomic) BOOL selectionIsInList;
- (BOOL)selectionIsInListTypes:(id)arg1;	// IMP=0x000000010016e066
- (BOOL)selectionIsInListType:(id)arg1;	// IMP=0x000000010016dfb4
- (void)increaseListNestingLevel:(id)arg1;	// IMP=0x000000010016df0c
- (void)insertListWithNumbers:(BOOL)arg1 undoTitle:(id)arg2;	// IMP=0x000000010016dbac
- (void)decreaseListNestingLevel:(id)arg1;	// IMP=0x000000010016daea
- (void)convertToBulletedList:(id)arg1;	// IMP=0x000000010016da8d
- (void)convertToNumberedList:(id)arg1;	// IMP=0x000000010016da30
- (void)convertListFromType:(id)arg1 toType:(id)arg2 undoTitle:(id)arg3;	// IMP=0x000000010016d6ea
- (void)layoutResizingAttachmentViews;	// IMP=0x000000010016d61e
- (void)changeDocumentBackgroundColorToColor:(id)arg1;	// IMP=0x000000010016d1a4
- (void)makeFontSmaller:(id)arg1;	// IMP=0x000000010016d12e
- (void)makeFontBigger:(id)arg1;	// IMP=0x000000010016d0b8
- (void)_removeFragmentBlockQuote:(id)arg1;	// IMP=0x000000010016cfa7
- (void)_removeBlockQuoteFromTree:(id)arg1;	// IMP=0x000000010016ccc1
- (void)_splitUpBlockQuotesOverlappingEndOfRange:(id)arg1;	// IMP=0x000000010016c863
- (void)_splitUpBlockQuotesOverlappingStartOfRange:(id)arg1;	// IMP=0x000000010016c4b5
- (void)changeQuoteLevel:(id)arg1;	// IMP=0x000000010016b4bc
- (BOOL)_removeAllQuotingFromTree:(id)arg1;	// IMP=0x000000010016b2f9
- (void)changeIndentation:(long long)arg1;	// IMP=0x000000010016b1f1
- (void)_changeIndentationIfAllowed:(long long)arg1;	// IMP=0x000000010016b174
- (void)decreaseIndentation:(id)arg1;	// IMP=0x000000010016b15b
- (void)increaseIndentation:(id)arg1;	// IMP=0x000000010016b144
- (void)addHorizontalRule:(id)arg1;	// IMP=0x000000010016b07e
- (void)removeLink:(id)arg1;	// IMP=0x000000010016b041
- (void)editLink:(id)arg1;	// IMP=0x000000010016b004
- (BOOL)becomeFirstResponder;	// IMP=0x0000000100067fe8
- (void)pasteWithCurrentStyle:(id)arg1;	// IMP=0x000000010016af28
- (void)pasteAsQuotation:(id)arg1;	// IMP=0x000000010016ae0c
- (void)paste:(id)arg1;	// IMP=0x000000010016acae
- (void)redo:(id)arg1;	// IMP=0x000000010016ac71
- (void)undo:(id)arg1;	// IMP=0x000000010016ac34
- (id)beginDraggingSessionWithItems:(id)arg1 event:(id)arg2 source:(id)arg3;	// IMP=0x000000010016ab18
- (BOOL)wantsPeriodicDraggingUpdates;	// IMP=0x000000010016ab0d
- (void)concludeDragOperation:(id)arg1;	// IMP=0x000000010016a9cc
- (BOOL)performDragOperation:(id)arg1;	// IMP=0x0000000100169f64
- (BOOL)prepareForDragOperation:(id)arg1;	// IMP=0x0000000100169e32
- (void)draggingExited:(id)arg1;	// IMP=0x0000000100169cf1
- (unsigned long long)draggingUpdated:(id)arg1;	// IMP=0x0000000100169c7c
- (unsigned long long)draggingEntered:(id)arg1;	// IMP=0x0000000100169996
- (void)saveMessageToDrafts:(id)arg1;	// IMP=0x0000000100169916
- (void)registerForDraggedTypes:(id)arg1;	// IMP=0x000000010005f7c3
- (void)insertNode:(id)arg1 atRange:(id)arg2;	// IMP=0x0000000100169874
- (void)saveSelectionForUndo;	// IMP=0x000000010016973b
- (void)setSelectionStart:(id)arg1 offset:(int)arg2 end:(id)arg3 offset:(int)arg4 affinity:(unsigned long long)arg5;	// IMP=0x0000000100169650
- (id)selectedContainerWithNameInArray:(id)arg1;	// IMP=0x00000001001695ac
@property(readonly, nonatomic) BOOL isFirstLineOfDocument;
@property(readonly, copy, nonatomic) DOMHTMLAnchorElement *selectedAnchor;
@property(readonly, copy, nonatomic) DOMNode *temporaryStartingSelectionMarker;
@property(readonly, copy, nonatomic) DOMNode *temporaryEndingSelectionMarker;
- (void)deleteTemporarySelectionMarkersFromDocument:(id)arg1;	// IMP=0x0000000100168c05
- (void)_restoreSelectionFromTemporaryMarkers:(BOOL)arg1;	// IMP=0x0000000100168800
- (void)restoreSelectionFromTemporaryMarkers;	// IMP=0x00000001001687ec
- (void)insertTemporarySelectionMarkersForRange:(id)arg1;	// IMP=0x0000000100168593
- (BOOL)isAutomaticLinkDetectionEnabled;	// IMP=0x0000000100077614
- (BOOL)_removeAllFormatting:(long long)arg1;	// IMP=0x000000010016813e
- (void)removeAllFormatting;	// IMP=0x0000000100168092
- (void)removeStyle:(id)arg1;	// IMP=0x00000001001676a1
- (BOOL)resetMainDocumentBodyAttributes;	// IMP=0x000000010016713f
- (BOOL)removeNonBodyChildrenAndAttributesFromMainDocumentElement;	// IMP=0x0000000100166c4b
- (BOOL)removeFormattingFromTree:(id)arg1 forDocument:(id)arg2 hasDocumentContext:(BOOL)arg3 imageStrippingMode:(long long)arg4;	// IMP=0x00000001001655f6
- (BOOL)removeHeadFromDocument:(id)arg1;	// IMP=0x000000010016559f
- (void)setMainDocumentURI:(id)arg1;	// IMP=0x000000010016541a
- (void)setStyleProperty:(id)arg1 value:(id)arg2 priority:(id)arg3 ofElement:(id)arg4;	// IMP=0x0000000100165230
- (void)setValue:(id)arg1 forAttribute:(id)arg2 ofElement:(id)arg3;	// IMP=0x00000001001650db
- (void)_insertNode:(id)arg1 parent:(id)arg2 offset:(unsigned int)arg3;	// IMP=0x0000000100164e97
- (void)insertNode:(id)arg1 parent:(id)arg2 nextSibling:(id)arg3;	// IMP=0x000000010006d657
- (void)replaceNode:(id)arg1 oldNode:(id)arg2;	// IMP=0x0000000100164def
- (void)deleteRange:(id)arg1;	// IMP=0x000000010016468b
- (void)deleteNode:(id)arg1;	// IMP=0x000000010016457f
- (BOOL)validateUserInterfaceItem:(id)arg1;	// IMP=0x0000000100164077
- (BOOL)selectionCouldBeMadeIntoALink;	// IMP=0x0000000100163fa8
@property(readonly, nonatomic) BOOL isSelectionInContentElement;
@property(copy, nonatomic) DOMHTMLElement *contentElement;
- (BOOL)_isContentEditable;	// IMP=0x0000000100163e40
- (BOOL)_replaceSelectionWithFragment:(id)arg1 attachments:(id)arg2 pasteboard:(id)arg3 types:(id)arg4 action:(long long)arg5 options:(unsigned long long)arg6 isPlainText:(BOOL)arg7;	// IMP=0x00000001001633af
- (BOOL)insertImageURL:(id)arg1 forAction:(long long)arg2;	// IMP=0x000000010016300d
- (BOOL)replaceSelectionUsingContext:(id)arg1;	// IMP=0x0000000100162e7f
- (id)_createAttachmentsForResources:(id)arg1 inFragment:(id)arg2;	// IMP=0x00000001001627b9
- (void)_clearExistingHTML;	// IMP=0x000000010016261f
- (void)loadHTMLString:(id)arg1 baseURL:(id)arg2 resourcesToAttach:(id)arg3;	// IMP=0x00000001001623c8
@property(readonly, retain) NSOperationQueue *presentedItemOperationQueue;
@property(readonly, copy) NSURL *presentedItemURL;
- (BOOL)_replaceSelectionWithPasteboardContentsDraggingInfo:(id)arg1 pasteboard:(id)arg2 pasteboardType:(id)arg3 action:(long long)arg4 options:(unsigned long long)arg5;	// IMP=0x000000010015f390
- (BOOL)_replaceSelectionWithContentsOfWebpage:(id)arg1;	// IMP=0x000000010015e858
- (BOOL)replaceSelectionWithPasteboardContentsDraggingInfo:(id)arg1 pasteboardType:(id)arg2 action:(long long)arg3 options:(unsigned long long)arg4;	// IMP=0x000000010015e7b6
- (BOOL)replaceSelectionWithPasteboardContentsPasteboard:(id)arg1 pasteboardType:(id)arg2 action:(long long)arg3 options:(unsigned long long)arg4;	// IMP=0x000000010015e752
- (unsigned long long)pastedContactCounter;	// IMP=0x000000010015e73a
- (unsigned long long)pastedGraphicCounter;	// IMP=0x000000010015e723
@property(retain, nonatomic) id <EditingMessageWebViewDelegate> editingDelegate;
- (id)mailPreferredPboardTypeFromTypes:(id)arg1 pasteboard:(id)arg2 isForDrag:(BOOL)arg3 preferHTML:(BOOL)arg4;	// IMP=0x000000010015dd84
- (BOOL)isActive;	// IMP=0x000000010015dd50
- (BOOL)maintainsInactiveSelection;	// IMP=0x0000000100074c5d
- (void)_editingMessageWebViewCommonInit;	// IMP=0x000000010015dcf5
- (id)initWithCoder:(id)arg1;	// IMP=0x000000010015dcb0
- (id)initWithFrame:(struct CGRect)arg1 frameName:(id)arg2 groupName:(id)arg3;	// IMP=0x000000010015dc1f

// Remaining properties
@property(readonly, copy) NSString *debugDescription;
@property(readonly, copy) NSString *description;
@property(readonly) unsigned long long hash;
@property(readonly, copy) NSURL *primaryPresentedItemURL;
@property(readonly) Class superclass;
@property(readonly) NSWindow *window;

@end

