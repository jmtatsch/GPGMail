//
//     Generated by class-dump 3.5 (64 bit).
//
//     class-dump is Copyright (C) 1997-1998, 2000-2001, 2004-2013 by Steve Nygard.
//

//#import "NSObject.h"

#import "MCMessageDataSource-Protocol.h"

@class MCActivityMonitor, MCInvocationQueue, MFMailAccount, MFMailbox, NSArray, NSCache, NSMutableArray, NSMutableDictionary, NSMutableSet, NSOperationQueue, NSString, NSTimer;

@interface MFMessageStore : NSObject <MCMessageDataSource>
{
    id _retainCountLock;	// 8 = 0x8
    BOOL _haveOpenLockFile;	// 16 = 0x10
    BOOL _isWritingChangesToDisk;	// 17 = 0x11
    BOOL _isTryingToClose;	// 18 = 0x12
    id _cacheLock;	// 24 = 0x18
    NSCache *_headerDataCache;	// 32 = 0x20
    NSCache *_headerCache;	// 40 = 0x28
    NSCache *_bodyDataCache;	// 48 = 0x30
    NSCache *_bodyCache;	// 56 = 0x38
    // Error parsing type: Ai, name: _storeState
    NSTimer *_timer;	// 72 = 0x48
    NSMutableDictionary *_fetchLockMap;	// 80 = 0x50
    MFMailbox *_mailbox;	// 88 = 0x58
    NSMutableArray *_allMessages;	// 96 = 0x60
    MFMailAccount *_account;	// 104 = 0x68
    NSMutableSet *_uniqueStrings;	// 112 = 0x70
    BOOL _isReadOnly;	// 120 = 0x78
    BOOL _compactOnClose;	// 121 = 0x79
    BOOL _hasUnsavedChangesToMessageData;	// 122 = 0x7a
    BOOL _forceInvalidation;	// 123 = 0x7b
    MCActivityMonitor *_openMonitor;	// 128 = 0x80
    NSOperationQueue *_deleteQueue;	// 136 = 0x88
    MCInvocationQueue *_openAndCloseMailboxQueue;	// 144 = 0x90
}

+ (void)_autosaveMessageStore:(id)arg1;	// IMP=0x00000000001eb4a8
+ (long long)copyMessages:(id)arg1 toMailbox:(id)arg2 shouldDelete:(BOOL)arg3;	// IMP=0x00000000001e7d0c
+ (id)succesfulMessagesFromMessages:(id)arg1 missedMessages:(id)arg2;	// IMP=0x00000000001e7c71
+ (BOOL)createEmptyStoreIfNeededForPath:(id)arg1 notIndexable:(BOOL)arg2;	// IMP=0x00000000001e47f0
+ (void)removeStoreFromCache:(id)arg1;	// IMP=0x00000000001e42d3
+ (void)registerAvailableStore:(id)arg1 forMailbox:(id)arg2;	// IMP=0x00000000001e4113
+ (id)currentlyAvailableStoresForAccount:(id)arg1;	// IMP=0x00000000001e3e55
+ (id)currentlyAvailableStoreForMailbox:(id)arg1;	// IMP=0x00000000001e3e36
+ (id)_copyRawAvailableStoreForMailbox:(id)arg1 wantsCreate:(BOOL)arg2 shouldCreate:(char *)arg3;	// IMP=0x00000000001e3ce4
+ (id)_storeCreationMarker;	// IMP=0x00000000001e3cc5
+ (id)descriptionOfOpenStores;	// IMP=0x00000000001e3c4c
+ (unsigned long long)numberOfCurrentlyOpenStores;	// IMP=0x00000000001e3bdf
+ (void)initialize;	// IMP=0x00000000001e3a5d
@property(readonly, nonatomic) MCInvocationQueue *openAndCloseMailboxQueue; // @synthesize openAndCloseMailboxQueue=_openAndCloseMailboxQueue;
@property(readonly, nonatomic) NSOperationQueue *deleteQueue; // @synthesize deleteQueue=_deleteQueue;
@property BOOL forceInvalidation; // @synthesize forceInvalidation=_forceInvalidation;
@property BOOL hasUnsavedChangesToMessageData; // @synthesize hasUnsavedChangesToMessageData=_hasUnsavedChangesToMessageData;
@property(retain) MCActivityMonitor *openMonitor; // @synthesize openMonitor=_openMonitor;
@property BOOL isReadOnly; // @synthesize isReadOnly=_isReadOnly;
//- (void).cxx_destruct;	// IMP=0x00000000001eefc1
- (void)setNumberOfAttachments:(unsigned int)arg1 isSigned:(BOOL)arg2 isEncrypted:(BOOL)arg3 forMessage:(id)arg4;	// IMP=0x00000000001eee3f
- (id)attachmentsDirectoryForMessage:(id)arg1 partNumber:(id)arg2;	// IMP=0x00000000001eee37
- (id)attachmentsDirectoryForMessage:(id)arg1;	// IMP=0x00000000001eee2f
- (BOOL)_updateFlagColor:(BOOL)arg1 forMessage:(id)arg2;	// IMP=0x00000000001eec8a
- (BOOL)_updateFlagForMessage:(id)arg1 key:(id)arg2 value:(BOOL)arg3;	// IMP=0x00000000001ee6e0
- (void)messagesWereAdded:(id)arg1 secondaryMessages:(id)arg2 duringOpen:(BOOL)arg3 options:(id)arg4;	// IMP=0x00000000001ee4d5
- (void)_setFlagsAndColorForMessages:(id)arg1;	// IMP=0x00000000001ee1e4
- (void)_setBackgroundColorForMessages:(id)arg1 textColorForMessages:(id)arg2;	// IMP=0x00000000001eddf7
- (void)updateMessages:(id)arg1 updateColor:(BOOL)arg2 updateNumberOfAttachments:(BOOL)arg3;	// IMP=0x00000000001ed6bc
- (void)updateMessageColorsSynchronouslyForMessages:(id)arg1 postingNotification:(BOOL)arg2;	// IMP=0x00000000001ed088
- (id)_cachedHeaderDataForMessage:(id)arg1 valueIfNotPresent:(id)arg2;	// IMP=0x00000000001ecfd6
- (id)_cachedBodyDataForMessage:(id)arg1 valueIfNotPresent:(id)arg2;	// IMP=0x00000000001ecf24
- (id)_cachedHeadersForMessage:(id)arg1 valueIfNotPresent:(id)arg2;	// IMP=0x00000000001ece72
- (id)_cachedBodyForMessage:(id)arg1 valueIfNotPresent:(id)arg2;	// IMP=0x00000000001ecdc0
- (id)_setOrGetValue:(id)arg1 forKey:(id)arg2 inCache:(id *)arg3;	// IMP=0x00000000001ecbe4
- (void)_invalidateObjectCachesForKey:(id)arg1;	// IMP=0x00000000001ecb4f
- (id)_setOrGetBody:(id)arg1 forMessage:(id)arg2 updateFlags:(BOOL)arg3;	// IMP=0x00000000001ecab5
- (void)_flushAllMessageData;	// IMP=0x00000000001ec9fb
- (void)flushAllCaches;	// IMP=0x00000000001ec764
- (void)_removeLockFile;	// IMP=0x00000000001ec6a0
- (BOOL)_acquireLockFile;	// IMP=0x00000000001ebaf5
@property(readonly, copy, nonatomic) NSString *lockFilePath;
- (void)_invalidateInBackground;	// IMP=0x00000000001eba51
- (void)_invalidate;	// IMP=0x00000000001eb9c8
@property(readonly) int storeState;
- (BOOL)setStoreState:(int)arg1 fromState:(int)arg2;	// IMP=0x00000000001eb99e
- (BOOL)_isReadyToBeInvalidated;	// IMP=0x00000000001eb8a8
@property(readonly, nonatomic) BOOL shouldCallCompactWhenClosing;
- (id)_mimeBodyForMessage:(id)arg1 updateFlags:(BOOL)arg2;	// IMP=0x00000000001eb77e
- (void)_setNeedsAutosave;	// IMP=0x00000000001eb61c
- (void)_cancelAutosave;	// IMP=0x00000000001eb5ac
- (BOOL)shouldSendUserNotificationForMessage:(id)arg1;	// IMP=0x00000000001eb48d
- (void)invalidateMessages:(id)arg1;	// IMP=0x00000000001eb2e5
- (void)invalidateMessage:(id)arg1;	// IMP=0x00000000001eb264
@property(readonly) BOOL isSortedAscending;
@property(readonly, copy, nonatomic) NSString *sortOrder;
- (void)suggestSortOrder:(id)arg1 ascending:(BOOL)arg2;	// IMP=0x00000000001eb24e
- (void)invalidateSyncEngine;	// IMP=0x00000000001eb158
- (void)fetchSynchronouslyForKnownChanges;	// IMP=0x00000000001eb146
@property(readonly, copy, nonatomic) NSString *status;
- (void)sendResponseType:(BOOL)arg1 forMeetingMessage:(id)arg2 completionHandler:(CDUnknownBlockType)arg3;	// IMP=0x00000000001eb076
- (id)setJunkMailLevel:(long long)arg1 forMessages:(id)arg2 trainJunkMailDatabase:(BOOL)arg3 userRecorded:(BOOL)arg4;	// IMP=0x00000000001ea9f1
- (void)updateMessageColorsSynchronouslyForMessages:(id)arg1;	// IMP=0x00000000001ea9da
- (void)updateNumberOfAttachmentsAndColorsForMessages:(id)arg1;	// IMP=0x00000000001ea9bd
- (void)updateNumberOfAttachmentsForMessages:(id)arg1;	// IMP=0x00000000001ea9a3
- (void)startSynchronization;	// IMP=0x00000000001ea99d
- (void)setColor:(id)arg1 highlightTextOnly:(BOOL)arg2 forMessages:(id)arg3;	// IMP=0x00000000001ea6d8
- (void)setFlagWithKey:(id)arg1 state:(BOOL)arg2 forMessages:(id)arg3;	// IMP=0x00000000001ea5d4
- (void)async_setFlagWithKey:(id)arg1 state:(BOOL)arg2 forMessages:(id)arg3;	// IMP=0x00000000001ea4de
- (id)async_setLocalFlagsForMessages:(id)arg1;	// IMP=0x00000000001ea0b4
- (id)setGmailLabelsFromDictionary:(id)arg1 forMessages:(id)arg2;	// IMP=0x00000000001e9e2f
- (void)async_setGmailLabelsFromDictionary:(id)arg1 forMessages:(id)arg2;	// IMP=0x00000000001e9ddf
- (id)setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;	// IMP=0x00000000001e9d87
- (void)async_setFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;	// IMP=0x00000000001e9d37
- (id)setPrimitiveFlagsFromDictionary:(id)arg1 forMessages:(id)arg2;	// IMP=0x00000000001e97ab
- (void)saveSnippetsForMessages:(id)arg1;	// IMP=0x00000000001e95cd
- (id)snippetsForMessages:(id)arg1;	// IMP=0x00000000001e95c5
@property(readonly, nonatomic) BOOL supportsSnippets;
- (id)colorForMessage:(id)arg1;	// IMP=0x00000000001e94e0
- (void)addUniquedStrings:(id)arg1;	// IMP=0x00000000001e945f
- (void)setUniquedStrings:(id)arg1;	// IMP=0x00000000001e93de
- (id)uniquedString:(id)arg1;	// IMP=0x00000000001e934a
- (id)headersForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2;	// IMP=0x00000000001e9223
- (void)updateBodyFlagsForMessage:(id)arg1 body:(id)arg2;	// IMP=0x00000000001e8e5d
- (id)bodyForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 updateFlags:(BOOL)arg3 allowPartial:(BOOL)arg4;	// IMP=0x00000000001e8d0c
- (id)fullBodyDataForMessage:(id)arg1 andHeaderDataIfReadilyAvailable:(id *)arg2 fetchIfNotAvailable:(BOOL)arg3;	// IMP=0x00000000001e8c7d
- (id)bodyDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 allowPartial:(BOOL)arg3;	// IMP=0x00000000001e894c
- (id)headerDataForMessage:(id)arg1 fetchIfNotAvailable:(BOOL)arg2 allowPartial:(BOOL)arg3;	// IMP=0x00000000001e8885
- (unsigned long long)_numberOfMessagesToCache;	// IMP=0x00000000001e887a
- (id)messageForMessageID:(id)arg1;	// IMP=0x00000000001e8872
- (id)messagesForDocumentID:(id)arg1;	// IMP=0x00000000001e86de
- (id)recentMessageWithValue:(id)arg1 forHeader:(id)arg2;	// IMP=0x00000000001e814f
- (long long)appendMessages:(id)arg1 missedMessages:(id)arg2 newMessages:(id)arg3 newDocumentIDsByOld:(id)arg4 flagsToSet:(id)arg5 appendReason:(long long)arg6 userInitiated:(BOOL)arg7 error:(id *)arg8;	// IMP=0x00000000001e80e3
- (long long)updateMessages:(id)arg1 withLibraryIDs:(id)arg2 newMessages:(id)arg3;	// IMP=0x00000000001e80db
- (long long)undoAppendOfLibraryIDs:(id)arg1;	// IMP=0x00000000001e80d3
@property(readonly, nonatomic) BOOL allowsDeleteInPlace;
@property(readonly, nonatomic) BOOL allowsOverwrite;
@property(readonly, nonatomic) BOOL allowsAppend;
- (void)deleteMessages:(id)arg1 moveToTrash:(BOOL)arg2;	// IMP=0x00000000001e7836
- (void)async_deleteMessages:(id)arg1 moveToTrash:(BOOL)arg2;	// IMP=0x00000000001e76ca
- (void)deleteMessagesOlderThanNumberOfDays:(long long)arg1 compact:(BOOL)arg2;	// IMP=0x00000000001e734d
- (void)doCompact;	// IMP=0x00000000001e7347
@property(readonly, nonatomic) BOOL canCompact;
- (void)rebuildTableOfContentsAsynchronously;	// IMP=0x00000000001e71df
@property(readonly) BOOL canRebuild;
- (id)routeMessages:(id)arg1 isUserAction:(BOOL)arg2 fetchingBodies:(BOOL)arg3 messagesNeedingBodies:(id)arg4;	// IMP=0x00000000001e7076
- (id)finishRoutingMessages:(id)arg1 routed:(id)arg2;	// IMP=0x00000000001e6c96
- (id)routeMessages:(id)arg1 fetchingBodies:(BOOL)arg2 messagesNeedingBodies:(id)arg3;	// IMP=0x00000000001e6b36
- (id)_defaultRouterDestination;	// IMP=0x00000000001e6b21
- (void)removeMessageFromAllMessages:(id)arg1;	// IMP=0x00000000001e6a9e
- (void)removeAllMessagesAtIndexes:(id)arg1;	// IMP=0x00000000001e6a1b
- (void)addMessagesToAllMessages:(id)arg1;	// IMP=0x00000000001e67b7
- (unsigned long long)indexOfMessageInAllMessages:(id)arg1;	// IMP=0x00000000001e6730
- (void)setAllMessages:(id)arg1;	// IMP=0x00000000001e669f
- (id)copyOfAllMessagesWithOptions:(unsigned int)arg1;	// IMP=0x00000000001e668d
- (id)mutableCopyOfAllMessages;	// IMP=0x00000000001e65b9
- (id)copyOfAllMessages;	// IMP=0x00000000001e64e5
@property(readonly) unsigned long long totalCount;
- (void)messagesWereUpdated:(id)arg1;	// IMP=0x00000000001e6446
- (void)messagesWereCompacted:(id)arg1;	// IMP=0x00000000001e6306
- (void)messagesWereAdded:(id)arg1;	// IMP=0x00000000001e62ec
- (void)structureDidChange;	// IMP=0x00000000001e624a
- (void)messageFlagsDidChange:(id)arg1 flags:(id)arg2;	// IMP=0x00000000001e6017
@property BOOL isFirstTimeSync;
@property(readonly, nonatomic) BOOL isTrash;
@property(readonly, copy) NSString *description;
@property(readonly, copy) NSString *debugDescription;
@property(readonly, nonatomic) const char *displayNameForLogging;
@property(readonly, copy, nonatomic) NSString *displayName;
@property(readonly, nonatomic) BOOL isOpened;
@property(readonly, copy, nonatomic) NSArray *allMailboxRepresentations;
@property(readonly, nonatomic) BOOL isSmartMailbox;
- (void)createDummyMailboxIfNecessary;	// IMP=0x00000000001e599e
@property(readonly, nonatomic) MFMailbox *mailbox;
@property(readonly, nonatomic) MFMailAccount *account;
- (void)invalidateSavingChanges:(BOOL)arg1;	// IMP=0x00000000001e58ce
- (void)saveChanges;	// IMP=0x00000000001e5826
- (void)cancelOpen;	// IMP=0x00000000001e57cc
- (void)didOpenWithMessages:(id)arg1;	// IMP=0x00000000001e5609
- (void)willOpen;	// IMP=0x00000000001e54de
- (void)cleanupSynchronously;	// IMP=0x00000000001e54cc
- (void)_cleanupSynchronouslyIfCancelOpenPosted;	// IMP=0x00000000001e5494
- (void)cleanupAsynchronously;	// IMP=0x00000000001e53e6
- (void)updateMetadataAsynchronously;	// IMP=0x00000000001e5301
- (void)openSynchronously;	// IMP=0x00000000001e5207
- (void)openAsynchronouslyWithOptions:(unsigned int)arg1;	// IMP=0x00000000001e5118
- (void)openAsynchronously;	// IMP=0x00000000001e4f5b
- (void)resetAllMessages;	// IMP=0x00000000001e4f23
- (void)reset;	// IMP=0x00000000001e4d48
- (void)dealloc;	// IMP=0x00000000001e4c74
- (id)copyWithZone:(struct _NSZone *)arg1;	// IMP=0x00000000001e4c69
- (void)_messageStoreCommonInit;	// IMP=0x00000000001e4ba1
- (id)initWithMailbox:(id)arg1 readOnly:(BOOL)arg2;	// IMP=0x00000000001e4b89
- (id)initWithAccount:(id)arg1;	// IMP=0x00000000001e4b01
- (id)initWithMailbox:(id)arg1 readOnly:(BOOL)arg2 createEmptyStore:(BOOL)arg3;	// IMP=0x00000000001e4918
- (id)init;	// IMP=0x00000000001e48d3
- (id)willDeallocPerformingInStoreCacheLock:(char *)arg1;	// IMP=0x00000000001e470d
- (void)queueSaveChangesInvocation;	// IMP=0x00000000001e4617
- (oneway void)release;	// IMP=0x00000000001ef1a9
- (unsigned long long)retainCount;	// IMP=0x00000000001ef13c
- (id)retain;	// IMP=0x00000000001ef0cf
- (id)objectSpecifierForMessage:(id)arg1;	// IMP=0x00000000001ef356
- (id)objectSpecifier;	// IMP=0x00000000001ef2f7

// Remaining properties
@property(readonly) unsigned long long hash;
@property(readonly) Class superclass;

@end

